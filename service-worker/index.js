#!/usr/bin/env node

/**
 *
 * Copyright 2016 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

const express = require('express');
const fs = require('mz/fs');
const handlebars = require('handlebars');

const helpers = require('./helpers');


// Handlebars `if` only checks for truthy and falsy values,
// so we have to write our own helper to check for equality (or inequality).
handlebars.registerHelper('ifNotEq', function (a, b, opts) {
  if (a !== b) {
    return opts.fn(this);
  }
});

handlebars.registerHelper('addHash', function (path) {
  const content = fs.readFileSync(`app${path}`).toString('utf-8');
  const hash = helpers.calculateHash(content);
  return path.replace(/\.([^.]+)$/, `.${hash}\.$1`);
});

const app = express();
// Matches paths like `/`, `/index.html`, `/about/` or `/about/index.html`.
const toplevelSection = /([^/]*)(\/|\/index.html)$/;
app.get(toplevelSection, (req, res, next) => {
  // Extract the menu item name from the path and attach it to
  // the request to have it available for template rendering.
  req.item = req.params[0];

  let files = [fs.readFile(`app/${req.item}/index.html`)];
  // If the request has no `?partial`, add header and footer
  if (!('partial' in req.query)) {
    files = [
      fs.readFile('app/header.partial.html'),
      ...files,
      fs.readFile('app/footer.partial.html')
    ];
  }

  Promise.all(files)
  .then(files => {
    res.body = files.map(f => f.toString('utf-8')).join('');
    next();
  })
  .catch(error => res.status(500).send(error.toString()));
});
app.use(helpers.handleHashesInNames);
app.use(helpers.readFile);
app.use(helpers.executeHandlebars);
app.use(helpers.setETag);
app.use((req, res, next) => {
  res.send(res.body);
  next();
});

// Self-signed certificate generated by `simplehttp2server`
// @see https://github.com/GoogleChrome/simplehttp2server
const options = {
  key: fs.readFileSync('key.pem'),
  cert: fs.readFileSync('cert.pem')
};
// It says spdy, but it's actually HTTP/2 :)
require('spdy').createServer(options, app).listen(8081);
